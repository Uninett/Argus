name: Test django site

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Lint
    steps:
    - uses: actions/checkout@v3

    - uses: actions/cache@v3
      id: cache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        pip install -U pip
        pip install tox flake8

    - name: flake8 critical lint
      run: tox -e flake8-critical

  test:
    needs: lint

    name: "Python ${{ matrix.python-version }}"
    runs-on: ubuntu-latest
    env:
      USING_COVERAGE: '3.8'

    strategy:
      max-parallel: 4
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v3

    - uses: actions/cache@v3
      id: cache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set Environment Variables
      run: |
        echo "DJANGO_SETTINGS_MODULE=argus.site.settings.test_CI" >> $GITHUB_ENV
        echo "POSTGRES_DB=argus_db" >> $GITHUB_ENV
        echo "POSTGRES_USER=argus" >> $GITHUB_ENV
        echo "POSTGRES_PASSWORD=password" >> $GITHUB_ENV

    - name: Install dependencies
      # if: steps.cache.outputs.cache-hit != 'true'
      run: |
        set -xe
        python -VV
        python -m site
        python -m pip install --upgrade pip "setuptools<46" wheel
        python -m pip install --upgrade virtualenv tox tox-gh-actions coverage

    - name: Set up PostgreSQL
      uses: harmon758/postgresql-action@v1
      with:
        postgresql db: $POSTGRES_DB
        postgresql user: $POSTGRES_USER
        postgresql password: $POSTGRES_PASSWORD

    - name: Run Tests with PostgreSQL
      env:
        DATABASE_URL: "postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost/${{ env.POSTGRES_DB }}"
      run: |
        python -m tox

    - name: "Combine coverage"
      if: "contains(env.USING_COVERAGE, matrix.python-version)"
      run: |
        set -xe
        python -m coverage combine
        python -m coverage xml

    - name: Upload to Codecov
      if: "github.repository_owner == 'Uninett' && contains(env.USING_COVERAGE, matrix.python-version)"
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true

    - name: Upload test reports (${{ matrix.python-version }})
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-reports
        path: |
          test-reports/**/*
