# Generated by Django 3.2.6 on 2022-03-11 15:24

from django.db import migrations, models


def copy_id_to_timeslot(apps, schema_editor):
    NotificationProfile = apps.get_model("argus_notificationprofile", "NotificationProfile")

    profiles = NotificationProfile.objects.all()
    for profile in profiles:
        profile.timeslot_id = profile.id

    NotificationProfile.objects.bulk_update(objs=profiles, fields=["timeslot"])


def fix_multi_use_timeslot_profiles(apps, schema_editor):
    Timeslot = apps.get_model("argus_notificationprofile", "Timeslot")

    timeslots = Timeslot.objects.prefetch_related("notification_profiles").annotate(
        num_profiles=models.Count("notification_profiles")
    )
    for timeslot in timeslots.filter(num_profiles__gt=1):
        profiles = timeslot.notification_profiles.order_by("pk").all()
        first_profile_id = profiles[0].id
        for i, profile in enumerate(profiles.exclude(id=first_profile_id)):
            new_timeslot = Timeslot.objects.get_or_create(user=timeslot.user, name="".join([timeslot.name, str(i)]))
            new_timeslot.time_recurrences.add(timeslot.time_recurrences)
            new_timeslot.save()
            profile.timeslot_id = new_timeslot.id
            profile.save()


def copy_timeslot_to_timeslot_copy(apps, schema_editor):
    NotificationProfile = apps.get_model("argus_notificationprofile", "NotificationProfile")

    profiles = NotificationProfile.objects.all()
    for profile in profiles:
        profile.timeslot_copy = profile.timeslot_id

    NotificationProfile.objects.bulk_update(objs=profiles, fields=["timeslot_copy"])


def copy_timeslot_copy_to_timeslot(apps, schema_editor):
    NotificationProfile = apps.get_model("argus_notificationprofile", "NotificationProfile")

    profiles = NotificationProfile.objects.all()
    for profile in profiles:
        profile.id = profile.timeslot_copy
        profile.save()


class Migration(migrations.Migration):

    dependencies = [
        ("argus_notificationprofile", "0009_notificationprofile_id"),
    ]

    operations = [
        migrations.RunPython(migrations.RunPython.noop, copy_timeslot_copy_to_timeslot),
        migrations.RunPython(copy_id_to_timeslot, fix_multi_use_timeslot_profiles),
        migrations.RunPython(migrations.RunPython.noop, copy_timeslot_to_timeslot_copy),
        migrations.AlterField(
            model_name="notificationprofile",
            name="timeslot",
            field=models.ForeignKey(
                on_delete=models.deletion.CASCADE,
                related_name="notification_profiles",
                to="argus_notificationprofile.timeslot",
            ),
        ),
        migrations.RemoveField(
            model_name="notificationprofile",
            name="timeslot_copy",
        ),
    ]
